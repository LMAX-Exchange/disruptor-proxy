/*
 * Copyright 2015-2016 LMAX Ltd.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'idea'
    id "biz.aQute.bnd.builder" version "6.3.1"
}


defaultTasks 'checkstyleTest', 'checkstyleMain', 'build'

group = 'com.lmax'
version = new Version(major: 2, minor: 2, revision: 0)

ext {
    fullName = 'Disruptor-Proxy'
    fullDescription = 'A utility for generating Disruptor-backed proxies for easy execution serialisation'
    teamName = 'LMAX Development Team'
    siteUrl = 'http://github.com/LMAX-Exchange/disruptor-proxy'
    sourceUrl = 'git@github.com:LMAX-Exchange/disruptor-proxy.git'

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'

    if (!project.hasProperty('sonatypeUrl')) sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
    if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.5'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    implementation 'org.javassist:javassist:3.19.0-GA'
    implementation 'com.lmax:disruptor:3.3.0'
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

jar {
    manifest.attributes('Built-By': System.properties['user.name'],
                        'Bundle-Name': fullName,
                        'Bundle-Vendor': teamName,
                        'Bundle-Description': fullDescription,
                        'Bundle-DocURL': siteUrl)
}

checkstyle {
    toolVersion = 6.3
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        disruptor(MavenPublication) {
            from components.java

            pom {
                name = project.ext.fullName
                description = project.ext.fullDescription
                url = project.ext.siteUrl

                scm {
                    url = "scm:${project.ext.sourceUrl}"
                    connection = "scm:${project.ext.sourceUrl}"
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'team'
                        name = teamName
                        email = 'disruptor-proxy@googlegroups.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url project.hasProperty('sonatypeUrl') ? project['sonatypeUrl'] : 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

            credentials {
                username = project.hasProperty('sonatypeUsername') ? project['sonatypeUsername'] : 'fake-user'
                password = project.hasProperty('sonatypePassword') ? project['sonatypePassword'] : 'fake-password'
            }
        }
    }
}

signing {
    sign publishing.publications.disruptor
}



class Version {
    int major, minor = 0, revision = 0
    boolean snapshot
    String stage

    String toString() {
        "$major.$minor.$revision${stage ? '.' + stage : ''}${snapshot ? '-SNAPSHOT' : ''}"
    }
}
